<?php

namespace Straker\EasyTranslationPlatform\Block\Adminhtml\Job\ViewJob;

use Magento\Backend\Block\Template\Context;
use Magento\Backend\Helper\Data as BackendHelperData;
use Magento\Eav\Model\AttributeFactory;
use Magento\Framework\View\Element\Template;
use Magento\Framework\ObjectManagerInterface;
use Straker\EasyTranslationPlatform\Model\AttributeOptionTranslation;
use Straker\EasyTranslationPlatform\Model\JobFactory;
use Straker\EasyTranslationPlatform\Model\ResourceModel\AttributeTranslation\CollectionFactory;
use Straker\EasyTranslationPlatform\Model\AttributeTranslationFactory;
//use Straker\EasyTranslationPlatform\Model\AttributeTranslationRepository;


class Attribute extends \Magento\Backend\Block\Widget\Grid\Extended
{
    protected $_attributeCollection;
    protected $_objectManager;
    protected $_jobFactory;
    protected $_attributeTranslationFactory;
    protected $_jobId;
    protected $_entityId;

    public function __construct(
        Context $context,
        BackendHelperData $backendHelper,
        ObjectManagerInterface $objectManager,
        JobFactory $jobFactory,
        AttributeTranslationFactory $attributeTranslationFactory,
        CollectionFactory $attributeCollection,
        array $data = []
    ) {
        $this->_jobFactory = $jobFactory;
        $this->_attributeCollection = $attributeCollection;
        $this->_objectManager = $objectManager;
        $this->_attributeTranslationFactory = $attributeTranslationFactory;
        parent::__construct($context, $backendHelper, $data);
    }

    public function _construct()
    {
        $this->_jobId = $this->getRequest()->getParam('job_id');
        $this->_entityId = $this->getRequest()->getParam('entity_id');
        parent::_construct(); // TODO: Change the autogenerated stub
    }

    /**
     * prepare collection
     */
    protected function _prepareCollection()
    {
        /** @var \Straker\EasyTranslationPlatform\Model\ResourceModel\AttributeTranslation\Collection $attrConnection */
        $attrConnection = $this->_attributeTranslationFactory->create()
            ->getCollection()
            ->addFieldToFilter('main_table.job_id', ['eq' => $this->_jobId ])
            ->addFieldToFilter('main_table.entity_id', ['eq' => $this->_entityId ]);

        $this->setCollection( $attrConnection );
//        var_dump( $attrConnection->getSelect()->__toString() );exit();
        return parent::_prepareCollection();
    }



    /**
     * @return $this
     */
    protected function _prepareColumns()
    {
        $this->addColumn(
            'in_attribute',
            [
                'type' => 'checkbox',
                'name' => 'in_attribute',
                'align' => 'center',
                'index' => 'attribute_id',
                'width' => '100px'
            ]
        );

        $this->addColumn(
            'job_id',
            [
                'header' => __( 'ID'),
                'type' => 'html',
                'name' => 'attribute_translation_id',
                'align' => 'left',
                'index' => 'attribute_translation_id',
                'column_css_class'=>'no-display',
                'header_css_class'=>'no-display',
            ]
        );

        $this->addColumn(
            'is_label',
            [
                'header' => __( 'Is Label'),
                'type' => 'text',
                'filter' => 'Straker\EasyTranslationPlatform\Block\Adminhtml\Job\ViewJob\Grid\Filter\JobAttributeIsLabel',
                'name' => 'label',
                'align' => 'center',
                'index' => 'is_label',
                'renderer' => 'Straker\EasyTranslationPlatform\Block\Adminhtml\Job\ViewJob\Grid\Renderer\JobAttributeIsLabel'
            ]
        );

        $this->addColumn(
            'label',
            [
                'header' => __( 'Label'),
                'filter' => false,
                'type' => 'text',
                'name' => 'label',
                'align' => 'left',
                'index' => 'label',
                'width' => '200px',
                'renderer' => 'Straker\EasyTranslationPlatform\Block\Adminhtml\Job\ViewJob\Grid\Renderer\JobAttributeLabel'
            ]
        );

        $this->addColumn(
            'original_value',
            [
                'header' => __( 'Original Text'),
                'type' => 'text',
                'name' => 'original_value',
                'align' => 'left',
                'index' => 'original_value',
                'header_css_class' => 'col-text',
                'column_css_class' => 'col-text'
            ]
        );

        $this->addColumn(
            'translated_value',
            [
                'header' => __('Translation'),
                'type' => 'text',
                'index' => 'translated_value',
                'header_css_class' => 'col-text',
                'column_css_class' => 'col-text'
            ]
        );
//
//        $this->addColumn(
//            'option_original_value',
//            [
//                'header' => __('Translation'),
//                'type' => 'text',
//                'index' => 'option_original_value',
//                'header_css_class' => 'col-text',
//                'column_css_class' => 'col-text'
//            ]
//        );
//
//        $this->addColumn(
//            'option_translated_value',
//            [
//                'header' => __('Translation'),
//                'type' => 'text',
//                'index' => 'option_translated_value',
//                'header_css_class' => 'col-text',
//                'column_css_class' => 'col-text'
//            ]
//        );
//        $this->addColumn(
//            'name',
//            [
//                'header' => __('Name'),
//                'index' => 'name',
//                'class' => 'xxx',
//                'width' => '50px',
//            ]
//        );
//        $this->addColumn(
//            'sku',
//            [
//                'header' => __('Sku'),
//                'index' => 'sku',
//                'class' => 'xxx',
//                'width' => '50px',
//            ]
//        );
//        $this->addColumn(
//            'price',
//            [
//                'header' => __('Price'),
//                'type' => 'currency',
//                'index' => 'price',
//                'width' => '50px',
//            ]
//        );

        return parent::_prepareColumns();
    }

//    /**
//     * @return string
//     */
//    public function getGridUrl()
//    {
//        return $this->getUrl('*/*/productsgrid', ['_current' => true]);
//    }
//
//    /**
//     * @param  object $row
//     * @return string
//     */
//    public function getRowUrl($row)
//    {
//        return '';
//    }
//
//    protected function _getSelectedProducts()
//    {
//        $job = $this->getJob();
//        return $job->getProducts($job);
//    }
//
//    /**
//     * Retrieve selected products
//     *
//     * @return array
//     */
//    public function getSelectedProducts()
//    {
//        $job = $this->getJob();
//        $selected = $job->getProducts($job);
//
//        if (!is_array($selected)) {
//            $selected = [];
//        }
//        return $selected;
//    }
////
//    protected function getJob()
//    {
//        $jobId = $this->getRequest()->getParam('job_key');
//        $job   = $this->_jobFactory->create();
//        if ($jobId) {
//            $job->load($jobId);
//        }
//        return $job;
//    }
//
//    /**
//     * {@inheritdoc}
//     */
//    public function canShowTab()
//    {
//        return true;
//    }
//
//    /**
//     * {@inheritdoc}
//     */
//    public function isHidden()
//    {
//        return true;
//    }

//    function _toHtml()
//    {
////        return '<div style="background-color: yellow;height: 300px;">12312312</div>';
//        return parent::_toHtml();
//    }
}
